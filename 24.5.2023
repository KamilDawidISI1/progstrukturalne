zad 7.3.1 7.3.2

#include <stdio.h>
#include <stdlib.h>

struct element{
    int i;
    struct element *next;
};

struct element *utworz(){
    return NULL;
};

void wyczysc(struct element* Lista){
struct element *wsk = Lista
while(Lista!=NULL){
    Lista = Lista->next;
    free(wsk);
    wsk = Lista;
}
}

int main()
{
    printf("Hello world!\n");
    return 0;
}

---------------------------------------

funckcje dodaj

struct element *dodaj(struct element *Lista, int a){
    struct element *wsk = malloc(sizeof(struct element));
    wsk->i=a;
    wsk->next=Lista;
    return wsk;
};

struct element * dodajnakoniec(struct element* Lista, int a){
    struct element *wsk = Lista;
    if(Lista == NULL){
        Lista = malloc(sizeof(struct element));
        Lista->i = a;
        Lista->next = NULL;
    }
    else{
        while(wsk->next != NULL){
            wsk = wsk->next;
        }
        wsk->next = malloc(sizeof(struct element));
        wsk->next->i = a;
        wsk->next->next = NULL;
    }
    return Lista;

}


------------------------------

funcje ileelementów, sumaelementów wypisz

int dlugosclisty(struct element *Lista){
    int pom = 0;
    while(Lista!=NULL){
        pom++;
        Lista=Lista->next;
    }
    return pom;
}

int sumaelementow(struct element *Lista){
    int sum = 0;
    while(Lista!=NULL){
        sum+=Lista->i;
        Lista=Lista->next;
    }
    return sum;
}

void wypisz(struct element *Lista){
    while(Lista!=NULL){
        printf("%d\n", Lista->i);
        Lista=Lista->next;
    }
    printf("\n");
}

----------------------------------
jak na razie w main

int main()
{
    struct element * lista = malloc(sizeof(struct element));
    lista->i = 5;
    lista->next = malloc(sizeof(struct element));
    lista->next->i = 5;
    lista->next->next = malloc(sizeof(struct element));
    lista->next->next->i = 7;
    lista->next->next->next = malloc(sizeof(struct element));
    lista->next->next->next->i = -4;
    lista->next->next->next->next = NULL;


    printf("%d\n", dlugosclisty(lista));
    printf("%d\n", sumaelementow(lista));
    wypisz(lista);



    struct element *lista2 = utworz();
    lista2 = dodajnakoniec(lista2, 4);
    wypisz(lista2);
    lista2 = dodajnakoniec(lista2, 15);
    wypisz(lista2);
    lista2 = dodajnakoniec(lista2, 3);
    wypisz(lista2);
    lista2 = dodajnakoniec(lista2, -7);
    wypisz(lista2);
    lista2 = dodajnakoniec(lista2, 9);
    wypisz(lista2);
    lista2 = dodajnakoniec(lista2, -2);
    wypisz(lista2);

    lista2=dodaj(lista2, 6);
    wypisz(lista2);
    printf("%d\n", dlugosclisty(lista2));
    printf("%d\n", sumaelementow(lista2));


    return 0;
}

--------------------------------------

minelement

int minelement(struct element *Lista){
    int min = Lista->i;
    while(Lista!=NULL){
        if(Lista->i < min){
            min = Lista->i;
        }
        Lista=Lista->next;
    }
    return min;
}

--------------------------------
7.3.20 i 7.3.21 w domu

------------------------------------

funkcja dodaj po elem(jak elem nie istnieje to na początek):
struct element * dodajpoelem(struct element * Lista, struct element * elem, int a){
    struct element *wsk=malloc(sizeof(struct element));
    wsk->i=a;
    if(elem == NULL){
        wsk->next=Lista;
        Lista = wsk;
    }
    else{
        wsk->next=elem->next;
        elem->next=wsk;
    }
    return Lista;
};

-------------------------------------------

funkcja usuwajaca:
struct element * usun(struct element * Lista, int a){
    struct element *wsk1, *wsk2;
    if(Lista == NULL){
        return Lista;
    }
    wsk1 = Lista;
    if(Lista->i==a){
        Lista=Lista->next;
        free(wsk1);
    }
    else{
      while((wsk1->next!=NULL) && (wsk1->next->i!=a)){
        
        wsk1=wsk1->next;
    }
    if(wsk1->next!=NULL){
        wsk2=wsk1->next;
        wsk1->next=wsk2->next;
        free(wsk2);
    }  
    }
    return Lista;
};

-------------------------------
na kolosa 
2 zadania z napisów
-modyfikacja napisów
-modyfikacja + przeliczanie
2 zad z tablic wielowymiaryw
-tablice wielowymiarowe
-tablice tablic
2 zad z list lub 1 z list i 1 zad z struktór
